## Create data to run IRT model {.unnumbered}


### Description

To run an IRT model using <code>idealstan</code>, you must first process your data using the <code>id_make</code> 
function.



### Usage

<pre><code class='language-R'>id_make(
  score_data = NULL,
  outcome_disc = "outcome_disc",
  outcome_cont = "outcome_cont",
  person_id = "person_id",
  item_id = "item_id",
  time_id = "time_id",
  group_id = "group_id",
  model_id = "model_id",
  ordered_id = "ordered_id",
  ignore_id = "ignore_id",
  simul_data = NULL,
  person_cov = NULL,
  item_cov = NULL,
  item_cov_miss = NULL,
  remove_cov_int = FALSE,
  unbounded = FALSE,
  exclude_level = NA,
  simulation = FALSE
)
</code></pre>


### Arguments

<table>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="score_data">score_data</code></td>
<td>
A data frame in long form, i.e., one row in the data for each 
measured score or vote in the data or a <code>rollcall</code> data object from package <code>pscl</code>.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="outcome_disc">outcome_disc</code></td>
<td>
Column name of the outcome with discrete values in <code>score_data</code>, default is <code>"outcome_disc"</code>
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="outcome_cont">outcome_cont</code></td>
<td>
Column name of the outcome with discrete values in <code>score_data</code>, default is <code>"outcome_disc"</code>
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="person_id">person_id</code></td>
<td>
Column name of the person/legislator ID index in <code>score_data</code>, 
default is <code>'person_id'</code>. Should be integer, character or factor.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="item_id">item_id</code></td>
<td>
Column name of the item/bill ID index in <code>score_data</code>, 
default is <code>'item_id'</code>.  Should be integer, character or factor.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="time_id">time_id</code></td>
<td>
Column name of the time values in <code>score_data</code>: 
optional, default is <code>'time_id'</code>. Should be a date or date-time class, but can be an integer
(i.e., years in whole numbers).
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="group_id">group_id</code></td>
<td>
Optional column name of a person/legislator group IDs (i.e., parties) in <code>score_data</code>. 
Optional, default is <code>'group_id'</code>. Should be integer, character or factor.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="model_id">model_id</code></td>
<td>
Column name of the model/response types in the data.
Default is <code>"model_id"</code>. Only necessary if a model with multiple 
response types (i.e., binary + continuous outcomes). Must be a 
column with a series
of integers matching the model types in <code>id_estimate</code> 
showing which row of the data matches which outcome.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="ordered_id">ordered_id</code></td>
<td>
Column name of the variable showing the count of categories for 
ordinal/categorical items (must be at least 3 categories)
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="ignore_id">ignore_id</code></td>
<td>
Optional column for identifying observations that should not be 
modeled (i.e., not just treated as missing, rather removed during estimation). Should 
be a binary vector (0 for remove and 1 for include). Useful for time-varying models where
persons may not be present during particular periods and missing data is ignorable.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="simul_data">simul_data</code></td>
<td>
Optionally, data that has been generated by the <code>id_sim_gen</code> function.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="person_cov">person_cov</code></td>
<td>
A one-sided formula that specifies the covariates
in <code>score_data</code> that will be used to hierarchically model the person/legislator ideal points
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="item_cov">item_cov</code></td>
<td>
A one-sided formula that specifies the covariates
in <code>score_data</code> that will be used to hierarchically model the 
item/bill discrimination parameters for the regular model
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="item_cov_miss">item_cov_miss</code></td>
<td>
A one-sided formula that specifies the covariates
in the dataset that will be used to hierarchically model the item/bill discrimination parameters for the
missing data model.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="remove_cov_int">remove_cov_int</code></td>
<td>
Whether to remove constituent terms from hierarchical covariates that 
interact covariates with IDs like <code>person_id</code> or <code>item_id</code>. Set to <code>TRUE</code> if
including these constituent terms would cause multi-collinearity with other terms in the model
(such as running a group-level model with a group-level interaction or a person-level model
with a person-level interaction).
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="unbounded">unbounded</code></td>
<td>
Whether or not the outcome/response is unbounded (i.e., continuous or
Poisson). If it is, missing value 
is recoded as the maximum of the outcome + 1.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="exclude_level">exclude_level</code></td>
<td>
A vector of any values that should be treated as <code>NA</code> in the response matrix. 
Unlike missing values, these values will be dropped from the data before 
estimation rather than modeled explicitly.
</td></tr>
<tr><td style = "white-space: nowrap; font-family: monospace; vertical-align: top"><code id="simulation">simulation</code></td>
<td>
If <code>TRUE</code>, simulated values are saved in the <code>idealdata</code> object for 
later plotting with the <code>id_plot_sims</code> function
</td></tr>
</table>


### Details

This function accepts a long data frame where one row equals one item-person (bill-legislator)
observation with associated continuous or discrete outcomes/responses.
You either need to include columns with specific names as required by the <code>id_make</code>
function such as <code>person_id</code> for person IDs and <code>item_id</code> for item IDs or
specify the names of the 
columns containing the IDs to the <code>id_make</code> function for each column name (see examples).
The only required columns are the item/bill ID and the person/legislator ID along with an 
outcome column, <code>outcome_disc</code> for discrete variables and <code>outcome_cont</code> for
continuous variables. If both columns are included, then any value can be included for 
<code>outcome_disc</code> if there are values for <code>outcome_cont</code> and vice versa.

If items of multiple types are included, a column <code>model_id</code> must be included with
the model type (see <code>id_estimate</code> function documentation for list of model IDs)
for the response distribution, such as 
1 for binary non-inflated, etc. If an ordinal outcome is included, an additional column
<code>ordered_id</code> must be included that has the total count of categories for that 
ordinal variable (i.e., 3 for 3 categories). 

For discrete data, it is recommended to include a numeric variable that starts at 0, such 
as values of 0 and 1 for binary data and 0,1,2 for ordinal/categorical data.
For continuous (unbounded) data, it is recommended to standardize the outcome to improve
model convergence and fit. 

Missing data should be passed as <code>NA</code> values in either
<code>outcome_disc</code> or <code>outcome_cont</code> and will be processed internally.



### Value

A <code>idealdata</code> object that can then be used in the <code>id_estimate</code> function 
to fit a model.



### Time-Varying Models

To run a time-varying model, you need to include the name of a column with dates (or integers) that is passed 
to the <code>time_id</code> option.



### Continuous Outcomes

If the outcome is continuous, you need to pass a dataframe with one column named
&quot;outcome_disc&quot; or pass the name of the column with the continuous data to the <code>outcome_disc</code>
argument.



### Hierarchical Covariates

Covariates can be fit on the person-level ideal point parameters as well as
item discrimination parameters for either the inflated (missing) or non-inflated (observed) 
models. These covariates must be columns that were included with the data fed to the 
<code>id_make</code> function. The covariate relationships are specified as 
one-sided formulas, i.e. <code>~cov1 + cov2 + cov1*cov2</code>. To interact covariates with the 
person-level ideal points you can use <code>~cov1 + person_id + cov1*person_id</code> and for
group-level ideal poins you can use <code>~cov1 + group_id + cov1*group_id</code> where
<code>group_id</code> or <code>person_id</code> is the same name as the name of the column 
for these options that you passed to <code>id_make</code> (i.e., the names of the columns
in the original data). If you are also going to model these intercepts&ndash;i.e. you are 
interacting the covariate with <code>person_id</code> and the model is estimating ideal points
at the person level&ndash;then set <code>remove_cov_int</code> to TRUE to avoid multicollinearity with the
ideal point intercepts.



### Examples
```{r, warning=FALSE, message=FALSE, eval=TRUE}
library(idealstan)

# You can either use a pscl rollcall object or a vote/score matrix 
# where persons/legislators are in the rows
# and items/bills are in the columns

library(dplyr)

# First, using a rollcall object with the 114th Senate's rollcall votes:

data('senate114')

to_idealstan <-   id_make(score_data = senate114,
               outcome_disc = 'cast_code',
               person_id = 'bioname',
               item_id = 'rollnumber',
               group_id= 'party_code',
               time_id='date')



```
